# rollup-source-code 


## 概览

[*rollupjs.org*](https://rollupjs.org/introduction/#overview)

rollup 是一个 JavaScript 模块打包器，把小块代码编译成体积更大更复杂的库和应用等。使用包含在 es6 中新标准格式的代码模块，取代之前的CommonJS和AMD。使用es模块，可自由、无缝的采用库中的单个方法。

## 背景

- webpack 打包非常繁琐，打包体积比较大
- rollup 主要打包 js 库
- vue/react/angular 都在用 rollup 作为打包工具
- 可以使用 es module 编写代码，rollup编译为回退为现有支持的代码格式：cjs, umd, amd 和esm.
- tree-shaking: statically analyze code; commonJS属于动态编译，做不了tree-shaking。后面会分析到的esbuild也没有做tree-shaking.

## 安装依赖

```cmd
pnpm i 
@babel/core
@babel/preset-env
@rollup/plugin-commonjs CommonJS 转为 ES6
@rollup/plugin-node-resolve
@rollup/plugin-typescript
lodash
rollup
rollup-plugin-babel
postcss
rollup-plugin-postcss
rollup-plugin-terser
tslib
typescript
rollup-plugin-serve
rollup-plugin-livereload
-D
```

- 以@开头的都是官方插件

## format 参数含义

- iife: 自执行函数，浏览器使用
- cjs：commonJS，Node使用
- umd：--name xxx 浏览器和Node都可以使用
- esm：es模块
- amd

> format 是 iife 和 umd 是需要指定 bundleName 

## 支持babel



## tree-shaking
用到的加进来，没用到的就不用。

## acorn 用法

传入源码，可以生成node节点ast语法树，walk函数可以深度遍历ast语法树，访问每一个节点，进入离开时对应的钩子函数，进行操作，拿到对应的节点进行操作。



```js

const sourceCode = 'import $ from 'jquery''


const ast = acorn.parse(sourceCode)

[astexplorer.net](https://astexplorer.net/) 解析如下：
{
  "type": "Program",
  "start": 0,
  "end": 22,
  "body": [
    {
      "type": "ImportDeclaration",
      "start": 0,
      "end": 22,
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "start": 7,
          "end": 8,
          "local": {
            "type": "Identifier",
            "start": 7,
            "end": 8,
            "name": "$"
          }
        }
      ],
      "source": {
        "type": "Literal",
        "start": 14,
        "end": 22,
        "value": "jquery",
        "raw": "'jquery'"
      }
    }
  ],
  "sourceType": "module"
}

```

实现 walk 方法
```js
function walk(astNode, { enter, leave }) {
  visit(astNode, null, enter, leave)
}

function visit(node, parent, enter, leave) {
  if (enter) {
    enter.call(null, node, parent)
  }

  const keys = Object.keys(node).filter(key => typeof node[key] === 'object')

  keys.forEach(key => {
    const value = node[key]
    if (Array.isArray(value)) {
      value.forEach(val => visit(val, node, enter, leave))
    } else if (value && value.type) {
      visit(value, node, enter, leave)
    }
  })

  if (leave) {
    leave.call(null, node, parent)
  }
}
```

walk调用输出结果：
```
enter--- Program undefined
enter--- ImportDeclaration Program
enter--- ImportDefaultSpecifier ImportDeclaration
enter--- Identifier ImportDefaultSpecifier
leave--- Identifier ImportDefaultSpecifier
leave--- ImportDefaultSpecifier ImportDeclaration
enter--- Literal ImportDeclaration
leave--- Literal ImportDeclaration
leave--- ImportDeclaration Program
leave--- Program undefined
```